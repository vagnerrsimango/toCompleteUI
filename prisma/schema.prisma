// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  categories    Category[]
  tasks         Task[]
  assignments   Assignment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id         String   @id @default(cuid())
  name       String
  created_at DateTime @default(now())
  image      String?

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
  Task   Task[]
}

model Task {
  id          String       @id @default(cuid())
  name        String
  created_at  DateTime     @default(now())
  updated_at  DateTime?
  start_at    DateTime
  end_at      DateTime
  category    Category     @relation(fields: [categoryId], references: [id])
  User        User?        @relation(fields: [userId], references: [id])
  userId      String?
  categoryId  String
  status      String       @default("NOT STARTED")
  assignments Assignment[]
}

model Assignment {
  id         String   @id @default(cuid())
  Task       Task?    @relation(fields: [taskId], references: [id])
  taskId     String?
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
  assignedAt DateTime @default(now())

  @@unique([taskId, userId])
}
